spring.application.uploadFolder = /home/rdanilov/java/zebrainseye/images/
spring.application.eyeFolder = /home/rdanilov/java/zebrainseye/eyes/
spring.application.spaceFolder = /home/rdanilov/java/zebrainseye/space/

opencv.classifier.path = /home/rdanilov/java/detectEye/src/main/resources/haarcascades/haarcascade_eye_tree_eyeglasses.xml
opencv.classifier.face.path = /home/rdanilov/java/detectEye/src/main/resources/haarcascades/haarcascade_frontalface_default.xml

# Уровень логирования
log4j.rootLogger=INFO, file, console

log4j.appender.console=org.apache.log4j.ConsoleAppender
log4j.appender.console.Target=System.out
log4j.appender.console.layout=org.apache.log4j.PatternLayout
log4j.appender.consoleAppender.layout.ConversionPattern=[%t] %-5p %c %x - %m%n

# Апендер для работы с файлами
log4j.appender.file=org.apache.log4j.RollingFileAppender
# Путь где будет создаваться лог файл
log4j.appender.file.File=/home/rdanilov/java/detectEye/log_file.log
# Указываем максимальный размер файла с логами
log4j.appender.file.MaxFileSize=1MB
# Конфигурируем шаблон вывода логов в файл
log4j.appender.file.layout=org.apache.log4j.PatternLayout
log4j.appender.file.layout.ConversionPattern=%d{dd-MM-yyyy HH:mm:ss} %-5p %c{1}:%L - %m%n

kafka.server.url=172.17.100.181:9092
kafka.server.topic=sav1
kafka.server.group=kafka

server.port = 8081